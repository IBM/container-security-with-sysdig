{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction \u00b6 Container Security with Sysdig \u00b6 Welcome to our workshop! In this workshop we'll be using Sysdig Secure on IBM Cloud to scan container images and evaluate OpenShift Clusters for compliance. The goals of this workshop are: Create a CI/CD pipeline that incorporates container scanning Explore runtime scanning policies Take a look at compliance scanning Agenda \u00b6 Lab 1: Sysdig Introduction Exercise to do the thing Compatibility \u00b6 This workshop has been tested on the following platforms: osName : version X, version Y Technology Used \u00b6 Brief Description Credits \u00b6 Full Name","title":"About the workshop"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#container-security-with-sysdig","text":"Welcome to our workshop! In this workshop we'll be using Sysdig Secure on IBM Cloud to scan container images and evaluate OpenShift Clusters for compliance. The goals of this workshop are: Create a CI/CD pipeline that incorporates container scanning Explore runtime scanning policies Take a look at compliance scanning","title":"Container Security with Sysdig"},{"location":"#agenda","text":"Lab 1: Sysdig Introduction Exercise to do the thing","title":"Agenda"},{"location":"#compatibility","text":"This workshop has been tested on the following platforms: osName : version X, version Y","title":"Compatibility"},{"location":"#technology-used","text":"Brief Description","title":"Technology Used"},{"location":"#credits","text":"Full Name","title":"Credits"},{"location":"lab1/","text":"Introduction \u00b6 Container Security with Sysdig \u00b6 Welcome to our workshop! In this workshop we'll be using Sysdig Secure on IBM Cloud to scan container images and evaluate OpenShift Clusters for compliance. The goals of this workshop are: Scan container images Explore runtime scanning policies Take a look at compliance scanning Steps \u00b6 Image scanning with Sysdig Secure \u00b6 In this section we will explore container image scanning with Sysdig Secure. For this workshop we will be taking a look at the Node Goat application that was built by OWASP as a purposely vulnerable application. From the IBM Cloud dashboard, click on the menu button at the top left of the page, scroll down, and click on Observability . Then select Monitoring on the left side of the page. You should now see a list of instances labeled sysdig-xxx . Find the instance that corresponds to the cluster number that you were assigned. For example, if I was assigned a cluster ending in -012 , then I would use sysdig-012 . Click on Open Dashboard . By default, you will be taken into the Sysdig Monitor side of the service. To switch to Sysdig Secure, click on the Monitor button at the top left and then click on the Secure icon that appears. Now that we are in Sysdig Secure we need to get our api-key. Click on the circle with your initials at the bottom left of the screen that is right below the Getting Started button. Click on Settings Look for the section labeled Sysdig Secure API and copy your API token and paste it into a notepad or somewhere that you can get it later. Now in your terminal enter the following while replacing with your Sysdig Secure API token copied in the previous step: export SYSDIG_TOKEN = <api_token> Go back to the settings page and find the tab labeled Agent Installation on the left side of the page. Copy the access key that shows up and save it in a notepad or somewhere you can copy it easily later. Go back to your terminal and enter the following, replacing with the access key you just copied. Note: The API token and Access Key are different and cannot be used interchangeably. export ACCESS_KEY = <access_key> Then we are going to deploy a container to scan a container image for us. Use the following command to deploy the scanning container: oc run --rm -it --image quay.io/sysdig/secure-inline-scan:2 -- image-scan docker.io/odrodrig/node-goat:1.0 --sysdig-token $SYSDIG_TOKEN --sysdig-url https://us-south.monitoring.cloud.ibm.com/ After a couple of minutes the scan will complete and it should result in a fail. Let's take a look at why. In the output of the scan there should be a url that takes you to the results page in Sysdig Secure. Copy the link and paste it into your browser. The link should take your to the scan results page in Sysdig Secure. From here we can see that there are 23 total vulnerabilities found based on the default scanning policy. You can click on DefaultPolicy under the Breakdown section to view more specific information on why the scan failed. This image has 5 High or Critical vulnerabilities that caused the scan to fail and a lot of warnings for various other rules that were flagged. Take some time to check out the Non-operating system tab under Vulnerabilities to see a list of CVEs found for the 3 rd party dependencies in the application. You can also check out the NPM tab under the Content section to view information about the location of the package in the container, the source of the package, and most importantly the licenses used for each package. Compliance Scanning \u00b6 In this section we will check out how to enable scanning for compliance frameworks such as PCI, SOC2, NIST-800-53, ISO27001, and more. We will do this by enabling periodic benchmarks against our workloads on the cluster. Before we can start scanning our cluster we first need to install the Sysdig agent that will allow our cluster to communicate with Sysdig Secure. In your terminal, enter the following: curl -sL https://ibm.biz/install-sysdig-k8s-agent | bash -s -- -a $ACCESS_KEY -c ingest.us-south.monitoring.cloud.ibm.com --openshift --imageanalyzer There should be 6 pods currently being created: 1 sysdig agent per node and 1 image analyzer per node. Before we move on we need to ensure that the pods are running. Run the following command: oc get pods -n ibm-observe If any pods are not yet ready, wait a few seconds and try again. Next, in Sysdig Secure click on the button labeled Compliance on the left side of the page. From here we can scan our infrastructure for compliance to some of the more popular specifications. Select SOC2 under the Workloads section as the specification from the list that appears. You should see a report with various controls that fall under the SOC2 framework. There are a few failures that can be addressed, the easiest being scheduling a CIS benchmark on our cluster. To do this, click on Schedule CIS Benchmark on the left side of the page under Common Fixes and select the first option that appears underneath it. Then a new section will expand on the right side of the page and there should be a link to Schedule CIS Benchmark . Click on the link. On the new page click on Schedule at the top right of the page. Click on Add Task that appears at the top right corner of the page. Next, fill out the form that appears. Give the benchmark a name such as CIS Benchmark For Type select Kubernetes benchmark You can leave the rest alone Click Save at the top right. You now have a CIS Benchmark scheduled to run twice a day. Rather than wait, let's kick off a benchmark now. Hover over the scheduled benchmark that you just created and click on the play icon that appears to the right side of the benchmark entry. Let's review the results by clicking on Results at the top left of the page. You should now see a few different results show up. The benchmark tests each one of the worker nodes in the cluster. Since we have 3 nodes, there should be 3 sets of results. Click on one of the benchmark results to take a look. It doesn't matter which one. You can see the tests that passed or failed on this page. Now, go back to the SOC2 regulatory compliance report page by clicking on the Compliance button on the left side of the page and selecting SOC2 under the Workloads section. You should notice that now there are more controls that our cluster passed. If you select the first control under Risk Assessment you should see that it is now a green checkmark because we have regularly scheduled CIS Benchmarks now. By going through each control and addressing the issues identified you can ensure that your cluster is SOC2 compliant. For this workshop, you don't have to go through each one but if you click through a few you will notice that some controls require enabling a policy with Falco rules. We will explore this in the next section. Security Policies and Rules \u00b6 In this section we will explore the policies that you can set to alert you of suspicious activity and the rules that make them up. Sysdig Secure utilizes an Open Source intrusion detection and activity monitoring project known as Falco which was created by Sysdig and then donated to the CNCF in 2018. Sysdig Secure comes with a set of Falco policies that can be enabled with the flick of switch but you also have the ability to create your own custom rules using the Falco syntax. For the workshop today we will be exploring the existing rules. Click on the Policies button on the left side of the page and select Runtime Policies . This will take you to a page of policies that come with Sysdig Secure. Scroll down until you see the policy called Access Cryptomining Network and click on the row, not the toggle switch. This should open up a new section on the right side of the page with information about the rules in this policy. Examine the two rules: one rule alerts if container traffic includes the stratum protocol which is a protocol commonly used to communicate with a mining network. The other rule will alert if a container attempts to connect through common mining ports. Enable the Access Cryptomining Network policy by click on the toggle switch. This policy is now in effect and will trigger if a container attempts to connect with the stratum protocol or through one of the identified common mining ports. To view the events and triggered policies, check out the Events button on the left side of the page. This will take you to a stream of events that have triggered policy rules on the cluster. Conclusion \u00b6 In this workshop we took a look at various pieces of Sysdig Secure such as container image scanning, regulatory compliance scanning, and even security policies with Falco.","title":"Introduction"},{"location":"lab1/#introduction","text":"","title":"Introduction"},{"location":"lab1/#container-security-with-sysdig","text":"Welcome to our workshop! In this workshop we'll be using Sysdig Secure on IBM Cloud to scan container images and evaluate OpenShift Clusters for compliance. The goals of this workshop are: Scan container images Explore runtime scanning policies Take a look at compliance scanning","title":"Container Security with Sysdig"},{"location":"lab1/#steps","text":"","title":"Steps"},{"location":"lab1/#image-scanning-with-sysdig-secure","text":"In this section we will explore container image scanning with Sysdig Secure. For this workshop we will be taking a look at the Node Goat application that was built by OWASP as a purposely vulnerable application. From the IBM Cloud dashboard, click on the menu button at the top left of the page, scroll down, and click on Observability . Then select Monitoring on the left side of the page. You should now see a list of instances labeled sysdig-xxx . Find the instance that corresponds to the cluster number that you were assigned. For example, if I was assigned a cluster ending in -012 , then I would use sysdig-012 . Click on Open Dashboard . By default, you will be taken into the Sysdig Monitor side of the service. To switch to Sysdig Secure, click on the Monitor button at the top left and then click on the Secure icon that appears. Now that we are in Sysdig Secure we need to get our api-key. Click on the circle with your initials at the bottom left of the screen that is right below the Getting Started button. Click on Settings Look for the section labeled Sysdig Secure API and copy your API token and paste it into a notepad or somewhere that you can get it later. Now in your terminal enter the following while replacing with your Sysdig Secure API token copied in the previous step: export SYSDIG_TOKEN = <api_token> Go back to the settings page and find the tab labeled Agent Installation on the left side of the page. Copy the access key that shows up and save it in a notepad or somewhere you can copy it easily later. Go back to your terminal and enter the following, replacing with the access key you just copied. Note: The API token and Access Key are different and cannot be used interchangeably. export ACCESS_KEY = <access_key> Then we are going to deploy a container to scan a container image for us. Use the following command to deploy the scanning container: oc run --rm -it --image quay.io/sysdig/secure-inline-scan:2 -- image-scan docker.io/odrodrig/node-goat:1.0 --sysdig-token $SYSDIG_TOKEN --sysdig-url https://us-south.monitoring.cloud.ibm.com/ After a couple of minutes the scan will complete and it should result in a fail. Let's take a look at why. In the output of the scan there should be a url that takes you to the results page in Sysdig Secure. Copy the link and paste it into your browser. The link should take your to the scan results page in Sysdig Secure. From here we can see that there are 23 total vulnerabilities found based on the default scanning policy. You can click on DefaultPolicy under the Breakdown section to view more specific information on why the scan failed. This image has 5 High or Critical vulnerabilities that caused the scan to fail and a lot of warnings for various other rules that were flagged. Take some time to check out the Non-operating system tab under Vulnerabilities to see a list of CVEs found for the 3 rd party dependencies in the application. You can also check out the NPM tab under the Content section to view information about the location of the package in the container, the source of the package, and most importantly the licenses used for each package.","title":"Image scanning with Sysdig Secure"},{"location":"lab1/#compliance-scanning","text":"In this section we will check out how to enable scanning for compliance frameworks such as PCI, SOC2, NIST-800-53, ISO27001, and more. We will do this by enabling periodic benchmarks against our workloads on the cluster. Before we can start scanning our cluster we first need to install the Sysdig agent that will allow our cluster to communicate with Sysdig Secure. In your terminal, enter the following: curl -sL https://ibm.biz/install-sysdig-k8s-agent | bash -s -- -a $ACCESS_KEY -c ingest.us-south.monitoring.cloud.ibm.com --openshift --imageanalyzer There should be 6 pods currently being created: 1 sysdig agent per node and 1 image analyzer per node. Before we move on we need to ensure that the pods are running. Run the following command: oc get pods -n ibm-observe If any pods are not yet ready, wait a few seconds and try again. Next, in Sysdig Secure click on the button labeled Compliance on the left side of the page. From here we can scan our infrastructure for compliance to some of the more popular specifications. Select SOC2 under the Workloads section as the specification from the list that appears. You should see a report with various controls that fall under the SOC2 framework. There are a few failures that can be addressed, the easiest being scheduling a CIS benchmark on our cluster. To do this, click on Schedule CIS Benchmark on the left side of the page under Common Fixes and select the first option that appears underneath it. Then a new section will expand on the right side of the page and there should be a link to Schedule CIS Benchmark . Click on the link. On the new page click on Schedule at the top right of the page. Click on Add Task that appears at the top right corner of the page. Next, fill out the form that appears. Give the benchmark a name such as CIS Benchmark For Type select Kubernetes benchmark You can leave the rest alone Click Save at the top right. You now have a CIS Benchmark scheduled to run twice a day. Rather than wait, let's kick off a benchmark now. Hover over the scheduled benchmark that you just created and click on the play icon that appears to the right side of the benchmark entry. Let's review the results by clicking on Results at the top left of the page. You should now see a few different results show up. The benchmark tests each one of the worker nodes in the cluster. Since we have 3 nodes, there should be 3 sets of results. Click on one of the benchmark results to take a look. It doesn't matter which one. You can see the tests that passed or failed on this page. Now, go back to the SOC2 regulatory compliance report page by clicking on the Compliance button on the left side of the page and selecting SOC2 under the Workloads section. You should notice that now there are more controls that our cluster passed. If you select the first control under Risk Assessment you should see that it is now a green checkmark because we have regularly scheduled CIS Benchmarks now. By going through each control and addressing the issues identified you can ensure that your cluster is SOC2 compliant. For this workshop, you don't have to go through each one but if you click through a few you will notice that some controls require enabling a policy with Falco rules. We will explore this in the next section.","title":"Compliance Scanning"},{"location":"lab1/#security-policies-and-rules","text":"In this section we will explore the policies that you can set to alert you of suspicious activity and the rules that make them up. Sysdig Secure utilizes an Open Source intrusion detection and activity monitoring project known as Falco which was created by Sysdig and then donated to the CNCF in 2018. Sysdig Secure comes with a set of Falco policies that can be enabled with the flick of switch but you also have the ability to create your own custom rules using the Falco syntax. For the workshop today we will be exploring the existing rules. Click on the Policies button on the left side of the page and select Runtime Policies . This will take you to a page of policies that come with Sysdig Secure. Scroll down until you see the policy called Access Cryptomining Network and click on the row, not the toggle switch. This should open up a new section on the right side of the page with information about the rules in this policy. Examine the two rules: one rule alerts if container traffic includes the stratum protocol which is a protocol commonly used to communicate with a mining network. The other rule will alert if a container attempts to connect through common mining ports. Enable the Access Cryptomining Network policy by click on the toggle switch. This policy is now in effect and will trigger if a container attempts to connect with the stratum protocol or through one of the identified common mining ports. To view the events and triggered policies, check out the Events button on the left side of the page. This will take you to a stream of events that have triggered policy rules on the cluster.","title":"Security Policies and Rules"},{"location":"lab1/#conclusion","text":"In this workshop we took a look at various pieces of Sysdig Secure such as container image scanning, regulatory compliance scanning, and even security policies with Falco.","title":"Conclusion"},{"location":"pre-work/","text":"Pre-work \u00b6 This section is broken up into the following steps: Sign up for IBM Cloud Download or clone the repo 1. Sign up for IBM Cloud \u00b6 Ensure you have an IBM Cloud ID 2. Download or clone the repo \u00b6 Various parts of this workshop will require the attendee to upload files or run scripts that we've stored in the repository. So let's get that done early on, you'll need git on your laptop to clone the repository directly, or access to GitHub.com to download the zip file. To Download, go to the GitHub repo for this workshop and download the archived version of the workshop and extract it on your laptop. Alternately, run the following command: git clone https://github.com/IBM/workshop-template cd workshop-template","title":"Pre-work"},{"location":"pre-work/#pre-work","text":"This section is broken up into the following steps: Sign up for IBM Cloud Download or clone the repo","title":"Pre-work"},{"location":"pre-work/#1-sign-up-for-ibm-cloud","text":"Ensure you have an IBM Cloud ID","title":"1. Sign up for IBM Cloud"},{"location":"pre-work/#2-download-or-clone-the-repo","text":"Various parts of this workshop will require the attendee to upload files or run scripts that we've stored in the repository. So let's get that done early on, you'll need git on your laptop to clone the repository directly, or access to GitHub.com to download the zip file. To Download, go to the GitHub repo for this workshop and download the archived version of the workshop and extract it on your laptop. Alternately, run the following command: git clone https://github.com/IBM/workshop-template cd workshop-template","title":"2. Download or clone the repo"},{"location":"resources/ADMIN/","text":"Admin Guide \u00b6 This section is comprised of the following steps: Instructor Step 1. Instructor Step \u00b6 Things specific to instructors can go here.","title":"Admin Guide"},{"location":"resources/ADMIN/#admin-guide","text":"This section is comprised of the following steps: Instructor Step","title":"Admin Guide"},{"location":"resources/ADMIN/#1-instructor-step","text":"Things specific to instructors can go here.","title":"1. Instructor Step"},{"location":"resources/CONTRIBUTORS/","text":"Contributors \u00b6 Remko de Knikker \u00b6 Github: remkohdev Twitter: @remkohdev LinkedIn: remkohdev Medium: @remkohdev Steve Martinelli \u00b6 Github: stevemar Twitter: @stevebot LinkedIn: stevemar","title":"Contributors"},{"location":"resources/CONTRIBUTORS/#contributors","text":"","title":"Contributors"},{"location":"resources/CONTRIBUTORS/#remko-de-knikker","text":"Github: remkohdev Twitter: @remkohdev LinkedIn: remkohdev Medium: @remkohdev","title":"Remko de Knikker"},{"location":"resources/CONTRIBUTORS/#steve-martinelli","text":"Github: stevemar Twitter: @stevebot LinkedIn: stevemar","title":"Steve Martinelli"},{"location":"resources/MKDOCS/","text":"mkdocs examples \u00b6 This page includes a few neat tricks that you can do with mkdocs . For a complete list of examples visit the mkdocs documentation . Code \u00b6 print ( \"hello world!\" ) Code with line numbers \u00b6 1 2 3 4 5 def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Code with highlights \u00b6 def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Code with tabs \u00b6 Tab Header #include <stdio.h> int main ( void ) { printf ( \"Hello world! \\n \" ); return 0 ; } Another Tab Header #include <iostream> int main ( void ) { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; } More tabs \u00b6 Windows If on windows download the Win32.zip file and install it. MacOS Run brew install foo . Linux Run apt-get install foo . Checklists \u00b6 Lorem ipsum dolor sit amet, consectetur adipiscing elit Vestibulum convallis sit amet nisi a tincidunt In hac habitasse platea dictumst Add a button \u00b6 Launch the lab Visit IBM Developer Sign up! Call outs \u00b6 Tip You can use note , abstract , info , tip , success , question warning , failure , danger , bug , quote or example . Note A note. Abstract An abstract. Info Some info. Success A success. Question A question. Warning A warning. Danger A danger. Example A example. Bug A bug. Call outs with code \u00b6 Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Nunc eu odio eleifend, blandit leo a, volutpat sapien. Phasellus posuere in sem ut cursus. Nullam sit amet tincidunt ipsum, sit amet elementum turpis. Etiam ipsum quam, mattis in purus vitae, lacinia fermentum enim. Formatting \u00b6 In addition to the usual italics , and bold there is now support for: highlighted underlined strike-through Tables \u00b6 OS or Application Username Password Windows VM Administrator foo Linux VM root bar Emojis \u00b6 Yes, these work. Images \u00b6 Nunc eu odio eleifend, blandit leo a, volutpat sapien right align image \u00b6 Nunc eu odio eleifend, blandit leo a, volutpat sapien","title":"mkdocs examples"},{"location":"resources/MKDOCS/#mkdocs-examples","text":"This page includes a few neat tricks that you can do with mkdocs . For a complete list of examples visit the mkdocs documentation .","title":"mkdocs examples"},{"location":"resources/MKDOCS/#code","text":"print ( \"hello world!\" )","title":"Code"},{"location":"resources/MKDOCS/#code-with-line-numbers","text":"1 2 3 4 5 def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ]","title":"Code with line numbers"},{"location":"resources/MKDOCS/#code-with-highlights","text":"def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ]","title":"Code with highlights"},{"location":"resources/MKDOCS/#code-with-tabs","text":"Tab Header #include <stdio.h> int main ( void ) { printf ( \"Hello world! \\n \" ); return 0 ; } Another Tab Header #include <iostream> int main ( void ) { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; }","title":"Code with tabs"},{"location":"resources/MKDOCS/#more-tabs","text":"Windows If on windows download the Win32.zip file and install it. MacOS Run brew install foo . Linux Run apt-get install foo .","title":"More tabs"},{"location":"resources/MKDOCS/#checklists","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit Vestibulum convallis sit amet nisi a tincidunt In hac habitasse platea dictumst","title":"Checklists"},{"location":"resources/MKDOCS/#add-a-button","text":"Launch the lab Visit IBM Developer Sign up!","title":"Add a button"},{"location":"resources/MKDOCS/#call-outs","text":"Tip You can use note , abstract , info , tip , success , question warning , failure , danger , bug , quote or example . Note A note. Abstract An abstract. Info Some info. Success A success. Question A question. Warning A warning. Danger A danger. Example A example. Bug A bug.","title":"Call outs"},{"location":"resources/MKDOCS/#call-outs-with-code","text":"Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Nunc eu odio eleifend, blandit leo a, volutpat sapien. Phasellus posuere in sem ut cursus. Nullam sit amet tincidunt ipsum, sit amet elementum turpis. Etiam ipsum quam, mattis in purus vitae, lacinia fermentum enim.","title":"Call outs with code"},{"location":"resources/MKDOCS/#formatting","text":"In addition to the usual italics , and bold there is now support for: highlighted underlined strike-through","title":"Formatting"},{"location":"resources/MKDOCS/#tables","text":"OS or Application Username Password Windows VM Administrator foo Linux VM root bar","title":"Tables"},{"location":"resources/MKDOCS/#emojis","text":"Yes, these work.","title":"Emojis"},{"location":"resources/MKDOCS/#images","text":"Nunc eu odio eleifend, blandit leo a, volutpat sapien","title":"Images"},{"location":"resources/MKDOCS/#right-align-image","text":"Nunc eu odio eleifend, blandit leo a, volutpat sapien","title":"right align image"},{"location":"resources/RESOURCES/","text":"Additional resources \u00b6 IBM Demos \u00b6 Collection: InfoSphere Information Server Tutorial: Transforming your data with IBM DataStage Redbooks \u00b6 IBM InfoSphere DataStage Data Flow and Job Design InfoSphere DataStage Parallel Framework Standard Practices Videos \u00b6 Video: Postal codes and part numbers (DataStage) Video: Find relationships between sales, employees, and customers (Information Analyzer) Video: Clean and analyze data (Governance Catalog)","title":"Additional resources"},{"location":"resources/RESOURCES/#additional-resources","text":"","title":"Additional resources"},{"location":"resources/RESOURCES/#ibm-demos","text":"Collection: InfoSphere Information Server Tutorial: Transforming your data with IBM DataStage","title":"IBM Demos"},{"location":"resources/RESOURCES/#redbooks","text":"IBM InfoSphere DataStage Data Flow and Job Design InfoSphere DataStage Parallel Framework Standard Practices","title":"Redbooks"},{"location":"resources/RESOURCES/#videos","text":"Video: Postal codes and part numbers (DataStage) Video: Find relationships between sales, employees, and customers (Information Analyzer) Video: Clean and analyze data (Governance Catalog)","title":"Videos"}]}